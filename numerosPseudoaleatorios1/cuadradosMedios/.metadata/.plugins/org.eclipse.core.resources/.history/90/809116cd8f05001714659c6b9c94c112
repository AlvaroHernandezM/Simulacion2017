package logic;

import java.util.ArrayList;
import java.util.Iterator;

public class CuadradosMedios2 {
	
	int semilla, numAleatorio;
	ArrayList<Integer> historial;
	
	public CuadradosMedios2(int semilla, int numAleatorio) {
		super();
		this.semilla = semilla;
		this.numAleatorio = numAleatorio;
		this.historial = new ArrayList<>();

		//this.historial.add(this.semilla);
	}
	
	public boolean validate(int number){
		if(this.historial.contains(number)){
			return false;					
		} else {
			this.historial.add(number);
			return true;	
		}
	}
	
	public double calcularSemila(){
		
		this.semilla = this.semilla * this.semilla;
		System.out.println(semilla);
		int numDigitos = this.contarDigitos(semilla);
		//this.imprimirSecuencia();
		this.semilla = (int) (this.semilla / Math.pow(10,(numDigitos-this.numAleatorio)/2)) %
				(int) Math.pow(10,this.numAleatorio);
		if(this.validate((int)this.semilla)){
			return (double) this.semilla / Math.pow(10,this.numAleatorio);			
		} else {
			return 0;
		}
	}
		
	private int contarDigitos(int valor){
		int numD = 1;
		while(valor > 10 ){
			valor /= 10;
			numD++;
		}
		return numD;
	}
	
	public double promedio(ArrayList<Integer> lista) {
		double acum = 0;
		for (Iterator<Integer> it = lista.iterator(); it.hasNext();) {
			acum += it.next();
		}

		return (double) acum /  lista.size();
	}

	public double varianza(ArrayList<Integer> lista) {
		double sumatoria = 0;

		double prom = promedio(lista);

		for (Iterator<Integer> it = lista.iterator(); it.hasNext();) {
			Double d = (double) it.next();
			sumatoria += Math.pow(d - prom, 2);
		}
		return Math.sqrt((double) sumatoria /(lista.size()-1));
	}
	
	public int[] histograma(ArrayList<Integer> lista, int rango) {
		int rangos[] = new int[rango];

		for (Iterator<Integer> it = lista.iterator(); it.hasNext();) {
			Double numero = it.next();
			System.out.println("Número "+numero);
			rangos[(int) (numero * rango)]++;
		}

		return rangos;
	}
	
	public int getSemilla() {
		return semilla;
	}

	public ArrayList<Integer> getHistorial() {
		return historial;
	}

	
}
